%% Syntax

tp    : type.
unit  : tp.
arrow : tp -> tp -> tp.
univ  : (tp -> tp) -> tp.

tm    : type.
empty : tm.
app   : tm -> tm -> tm.
lam   : tp -> (tm -> tm) -> tm.
tapp  : tm -> tp -> tm.
tlam  : (tp -> tm) -> tm.

%% Static Semantics

of       : tm -> tp -> type.
of-empty : of empty unit.
of-lam   : of (lam T2 ([x] E x)) (arrow T2 T)
            <- ({x: tm} of x T2 -> of (E x) T).
of-app   : of (app E1 E2) T
            <- of E1 (arrow T2 T)
            <- of E2 T2.
of-tlam  : of (tlam ([x] E x)) (univ ([x] T x))
            <- ({x} of (E x) (T x)).
of-tapp  : of (tapp E T') (T T')
            <- of E (univ ([x] T x)).

%% Dynamic Semantics

value       : tm -> type.
value-empty : value empty.
value-lam   : value (lam T ([x] E x)).
value-tlam  : value (tlam ([x] E x)).

step           : tm -> tm -> type.
step-app-1     : step (app E1 E2) (app E1' E2)
                  <- step E1 E1'.
step-app-2     : step (app E1 E2) (app E1 E2')
                  <- value E1
                  <- step E2 E2'.
step-app-beta  : step (app (lam T2 ([x] E x)) E2) (E E2)
                  <- value E2.
step-tapp      : step (tapp E T) (tapp E' T)
                  <- step E E'.
step-tapp-beta : step (tapp (tlam ([x] E x)) T) (E T).

%% Preservation

preserv : step E E' -> of E T -> of E' T -> type.
%mode preserv +Dstep +Dof -Dof'.

preserv-app-1 : preserv
                 (step-app-1 (DstepE1 : step E1 E1') : step (app E1 E2) (app E1' E2))
                 (of-app (DofE2 : of E2 T2) DofE1)
                 (of-app DofE2 DofE1')
                  <- preserv DstepE1 DofE1 (DofE1' : of E1' (arrow T2 T1)).

preserv-app-2 : preserv
                 (step-app-2 (DstepE2 : step E2 E2') DvalueE1 : step (app E1 E2) (app E1 E2'))
                 (of-app DofE2 (DofE1 : of E1 (arrow T2 T1)))
                 (of-app DofE2' DofE1)
                  <- preserv DstepE2 DofE2 (DofE2' : of E2' T2).

preserv-app-beta : preserv
                    (step-app-beta DvalueE2 : step (app (lam T2 ([x] E x)) E2) (E E2))
                    (of-app (DofE2 : of E2 T2) (of-lam (([x] [dx] DofE x dx)
                                                          : {x : tm} {dx : of x T2} of (E x) T)))
                    (DofE E2 DofE2).

preserv-tapp : preserv
                (step-tapp DstepE : step (tapp E T1) (tapp E' T1))
                (of-tapp DofE : of (tapp E T1) (T T1))
                (of-tapp DofE' : of (tapp E' T1) (T T1))
                 <- preserv DstepE DofE  (DofE' : of E' (univ ([x] T x))).

preserv-tapp-beta : preserv
                     (step-tapp-beta : step (tapp (tlam ([x] E x)) T') (E T'))
                     (of-tapp (of-tlam (([x] DofE x) : {x : tp} of (E x) (T x))))
                     (DofE T').

%worlds () (preserv _ _ _).
%total D (preserv D _ _).

%% Progress

vos : tm -> type. % "value-or-step"
vos/value : vos E <- value E.
vos/step : vos E <- step E E'.

progress : of E T -> vos E -> type.
%mode progress +DofE -VosE.

progress/empty : progress of-empty (vos/value value-empty).
progress/lam : progress (of-lam _) (vos/value value-lam).
progress/tlam : progress (of-tlam _) (vos/value value-tlam).

% We can only case-split at top level, so to case-split on whether E1 and E2 are
% values or step, we need to prove progress for applications separately.
progress-app : of E1 (arrow T2 T)
               -> vos E1
               -> vos E2
               -> vos (app E1 E2)
               -> type.
%mode progress-app +DofE1 +VosE1 +VosE2 -VosApp.

progress-app/step-app-1 : progress-app
                           _
                           (vos/step (X : step E1 E1'))
                           _
                           (vos/step (step-app-1 X : step (app E1 E2) (app E1' E2))).

progress-app/step-app-2 : progress-app
                           _
                           (vos/value (X : value E1))
                           (vos/step (Y : step E2 E2'))
                           (vos/step (step-app-2 Y X : step (app E1 E2) (app E1 E2'))).

% Although we never destruct the proof of `of E1 (arrow T2 T)`, it is used in
% the following case where we see that the only values of arrow type are lambdas.
progress-app/step-app-beta : progress-app
                              _
                              (vos/value (_ : value (lam T E)))
                              (vos/value (X : value E2))
                              (vos/step (step-app-beta X : step (app (lam T E) E2) (E E2))).

%worlds () (progress-app _ _ _ _).
%total {} (progress-app _ _ _ _).

progress/app : progress (of-app (D2 : of E2 T2) (D1 : of E1 (arrow T2 T))) VosApp
               <- progress D1 (VosE1 : vos E1)
               <- progress D2 (VosE2 : vos E2)
               <- progress-app D1 VosE1 VosE2 VosApp.

% The same thing happens for tapp, although the case split is simpler here.
progress-tapp : {T' : tp} of E (univ T)
                -> vos E
                -> vos (tapp E T')
                -> type.
%mode progress-tapp +T' +DofE +VosE -VosTapp.

progress-tapp/step-tapp : progress-tapp T'
                           _
                           (vos/step (X : step E E'))
                           (vos/step (step-tapp X : step (tapp E T') (tapp E' T'))).

progress-tapp/step-tapp-beta : progress-tapp T'
                                _
                                (vos/value (X : value (tlam E)))
                                (vos/step step-tapp-beta).

%worlds () (progress-tapp _ _ _ _).
%total {} (progress-tapp _ _ _ _).

progress/tapp : progress (of-tapp (D : of E (univ T))) VosTapp
                <- progress D (VosE : vos E)
                <- progress-tapp _ D VosE VosTapp.

%worlds () (progress _ _).
%total D (progress D _).
